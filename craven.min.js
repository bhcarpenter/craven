(function(){var e,g=[],h=g.slice,j=g.splice,k=g.push,l=g.shift,m=g.pop,n=g.unshift,p=g.map;function q(a,b,c,d){b=[b,c];k.apply(b,d);return j.apply(a,b)}function r(a,b){for(var c={},d=b.length;d--;)c[b[d]]=a[b[d]];return c}function t(a,b){for(var c in b)a[c]=b[c]};var u={d:function(a,b,c){this.b||(this.b={},this.c={});this.b[a]||(this.b[a]=[],this.c[a]=[]);this.b[a].push(b);this.c[a].push(c||this)},i:function(a,b,c){var d,f;if(this.b&&(d=this.b[a])&&(f=this.c[a]))for(a=d.length;a--;)if(d[a]==b&&f[a]==c){d.splice(a,1);f.splice(a,1);break}},a:function(a){var b,c,d,f;if(this.b&&(b=this.b[a])&&(c=this.c[a])){b=b.slice(0);c=c.slice(0);f=h.call(arguments,1);f.push(this);for(d=b.length;d--;)b[d].apply(c[d],f)}}};u.on=u.d;u.off=u.i;u.trigger=u.a;function v(a){a&&this.reset(a)}t(v.prototype,u);v.prototype.e={};v.prototype.attributes=[];e=v.prototype;e.reset=function(a){t(this,this.e=r(a,this.attributes))};e.l=function(a){t(this,r(a,this.attributes))};e.toJSON=function(){return r(this,this.attributes)};e.r=function(){};e.k=function(){if(!1!==this.validate()){var a=this.e,b=this.e=this.toJSON(),c,d={},f=!1;for(c in b)b[c]!==a[c]&&(f=d[c]=b[c]);f&&this.a("change",d,a)}};e.p=function(){this.a("destroy")};function w(a){a&&k.apply(this,x(this,a))}w.prototype=[];t(w.prototype,u);w.prototype.modelType=v;e=w.prototype;e.pop=function(){return y(this,m,this.length-1)};e.push=function(){return z(this,arguments,k,this.length)};e.shift=function(){return y(this,l,0)};e.unshift=function(){return z(this,arguments,n,0)};e.splice=function(){var a=arguments,b=x(this,h.call(a,2)),a=q(this,a[0],a[1],b);B(this,a);a.length&&this.a("remove",a);b.length&&this.a("add",b);return a};
function z(a,b,c,d){b=x(a,b);c=c.apply(a,b);a.a("add",b,d);return c}function y(a,b,c){b=b.call(a);B(a,b);b&&a.a("remove",[b],c);return b}e.reset=function(a){a=q(this,0,this.length,x(this,a));B(this,a);this.a("reset",a)};e.remove=function(a){this.j(this.indexOf(a))};e.j=function(a){if(-1!=a){var b=j.call(this,a,1);B(this,b);this.a("remove",b,a)}};e.toJSON=function(){return this.map(function(a){return a.toJSON()})};e.h=function(a,b,c){this.a("change",a,b,c)};
function x(a,b){var c=a.modelType;return p.call(b,function(a){a instanceof c||(a=new c(a));a.d("destroy",this.remove,this);a.d("change",this.h,this);return a},a)}function B(a,b){for(var c=b.length;c--;)b[c].i("destroy",a.remove,a),b[c].d("change",a.h,a)};function C(a,b){a&&t(this,a);if(!this.view&&!b){var c=document.createElement(this.tagName);t(c,this.attributes);this.view=c}var d=this;this.m=function(a){var b=d.domEvents[a.type],c=d.view,A=a.target,s;for(s in b){var H=b[s];if(""===s&&c===A||-1!==h.call(c.querySelectorAll(s),0).indexOf(A))d[H](a)}};D(this,"on");E(this,"addEventListener")}C.prototype.tagName="div";C.prototype.attributes={};C.prototype.remove=function(){var a=this.view,b=a.parentNode;b&&b.removeChild(a);D(this,"off");E(this,"removeEventListener")};
function D(a,b){var c=a.model,d=a.events;if(c&&d)for(var f in d)c[b](f,a[d[f]],a)}function E(a,b){var c=a.domEvents,d=a.view;if(c&&d)for(var f in c)d[b](f,a.m,!1)};var F={g:[],add:function(a,b,c){var d={};d.pattern=RegExp(a.replace(/(^|\/):[\w\d]*(\/|$)/,"$1(.+)$2"));d.q=b;d.o=c;this.g.push(d)},n:function(){var a=this;window.addEventListener("popstate",function(){a.f(location.pathname)},!1)},navigate:function(a){window.history.pushState({},"",a);this.f(a)},f:function(a){for(var b=this.g,c=b.length,d,f;c--;)if(d=b[c],f=d.pattern.exec(a))f.unshift(),d.q.apply(d.o,f)}};var G={};window.Craven=G;G.Events=u;G.Model=v;v.Prototype=function(){return new v};v.prototype.reset=v.prototype.reset;v.prototype.update=v.prototype.l;v.prototype.toJSON=v.prototype.toJSON;v.prototype.validate=v.prototype.r;v.prototype.save=v.prototype.k;v.prototype.destroy=v.prototype.p;G.Collection=w;w.Prototype=function(){return new w};w.prototype.reset=w.prototype.reset;w.prototype.remove=w.prototype.remove;w.prototype.removeAt=w.prototype.j;G.Controller=C;
C.Prototype=function(){return new C(null,!0)};C.prototype.remove=C.prototype.remove;G.Router=F;F.add=F.add;F.activate=F.n;F.navigate=F.navigate;}());
